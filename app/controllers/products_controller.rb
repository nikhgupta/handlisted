class ProductsController < ApplicationController
  before_action :set_product, only: [:show, :visit, :like]
  before_action :authenticate_user!, only: [:like, :create]

  include Commentable
  include Sidekiq::Statusable
  include ProductScraper::Checkable

  # GET /products
  # GET /products.json
  def index
    query = params[:product][:search] rescue nil
    scope = query.present? ? Product.search(query) : Product.order(updated_at: :desc)
    @products = scope.all.page params[:page]
  end

  def show
  end

  # NOTE: Brakeman reports this falsely under insecure redirect, but the
  # affiliate link is not generated by the user, and hence, the vulnerability
  # does not apply here.
  def visit
    redirect_to @product.affiliate_link
  end

  def like
    method = current_user.liking?(@product) ? :unlike : :like
    respond_to do |format|
      if current_user.send method, @product
        format.js { render :like }
      else
        format.js { render :toggle_error, action: :like }
      end
    end
  end

  # NOTE: this action simply queues the given product inside Sidekiq. When
  # sidekiq reports that the product has been imported (maybe, already), the
  # user is then redirected to product page using JS.
  def create
    job_id = ProductScraperJob.perform_async current_user.id, params[:url]
    respond_to do |format|
      format.html { redirect_to root_path, notice: "Successfully queued.." }
      format.json { render json: { id: job_id }.to_json }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_product
      @product = Product.find(params[:id])
    end
end
