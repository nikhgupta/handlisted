# This is a manifest file that'll be compiled into application.js, which will include all the files
# listed below.
#
# Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
# or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
#
# It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
# compiled file.
#
# Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
# about supported directives.
#
#= require jquery
#= require jquery_ujs
#= require absolute-admin/jquery.validate.min
#= require absolute-admin/jquery.validate.additional.min
#= require absolute-admin/theme-utility-with-bootstrap
#= require absolute-admin/theme-core
#= require absolute-admin/plugins/magnific/jquery.magnific-popup
#= require users
#= require products
#= require product_adder
#= require product_card
#= require_self

$(document).ajaxError (e, XHR, options) ->
  # TODO: display a message here saying that the action requires login
  window.location.replace("/login") if XHR.status == 401

$ ->
  "use strict"

  Core.init()

  # Sidekiq Queue results on Search/Add Product Page
  new ProductAdder(
    form:  '.navbar-search',
    input: '#product_search'
    endpoints:
      status: "/products/create/status.json"
      check: "/products/create/check.json"
      add: "/products.json"
  ).init()

  jQuery.validator.addMethod 'allowed', ((value, element, params) ->
    # allow any non-whitespace characters as the host part
    regex  = ''
    regex += '0-9'    if params.match /number/
    regex += 'a-z'    if params.match /lowercase/
    regex += 'A-Z'    if params.match /uppercase/
    regex += 'a-zA-Z' if params.match /alphabet/
    regex  = new RegExp("^[#{regex}]+$")
    @optional(element) or regex.test(value)
  ), 'Please enter a valid value with <strong>{0}</strong> only.'

  $('.admin-form form, form.admin-form').validate
    errorClass: "state-error"
    validClass: "state-success"
    errorElement: "em"
    highlight: (element, errorClass, validClass) ->
      $(element).closest('.field').addClass(errorClass).removeClass validClass
    unhighlight: (element, errorClass, validClass) ->
      $(element).closest('.field').removeClass(errorClass).addClass validClass
    errorPlacement: (error, element) ->
      if element.is(':radio') or element.is(':checkbox')
        element.closest('.option-group').after error
      else
        error.insertAfter element.parent()
